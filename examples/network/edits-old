# Base Types
rename type GHC.Int.Int64 = GHC.Num.Int

# Rewrite IO library using ITrees
rename type GHC.Types.IO = IO.IO

# Ad-hoc "Axiomatization" of Network library
rename type Network.Socket.Types.SockAddr = NetworkTypes.SockAddr
rename type Network.Socket.Types.Socket = NetworkTypes.Socket
rename value Network.Socket.Types.AF_INET = NetworkTypes.AF_INET
rename value Network.Socket.Types.SockAddrInet = NetworkTypes.SockAddrInet
rename value Network.Socket.Types.Stream = NetworkTypes.Stream

rename value Network.Socket.ReuseAddr = NetworkTypes.ReuseAddr
rename value Network.Socket.iNADDR_ANY = NetworkTypes.iNADDR_ANY
rename value Network.Socket.setSocketOption = Network.setSocketOption

rename value Network.Socket.bind = Network.bind
rename value Network.Socket.close = Network.close
rename value Network.Socket.listen = Network.listen
rename value Network.Socket.send = Network.send
rename value Network.Socket.socket = Network.socket
rename value Network.accept = Network.accept


# Rewrite non-terminating loop with forever combinator.
redefine Definition Main.mainLoop : NetworkTypes.Socket -> IO.IO unit :=
  fun (sock : NetworkTypes.Socket) => @ITree.forever IO.ioE unit unit
    (Network.accept sock GHC.Base.>>= (fun conn => runConn conn)).

# Hacky work-around from the fact that hs-to-coq doesn't realize that
# the preamble already imports ITree...
skip module ITree

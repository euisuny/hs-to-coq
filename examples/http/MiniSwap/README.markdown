This artifact consists of all of our developments around the swap server
discussed in our paper, including all the specifications, all the proofs, and
the test suite.

Installation
================

Prerequisites
----------------

You can either manually install all the dependencies, or use the docker image
we have provided.

### Using Docker

```shell
docker run -it ysli/from-c-to-itree
```
and follow the [Build Instructions](#build-instructions).

### Manual Installation

Building this artifact requires the following software:

- OCaml (>= 4.06.1).

- Coq 8.8.1 (8.8.2 might also works, but we have not tested that).

- CompCert 3.4 and VST (only to build the VST proofs and the final
  correctness theorem). (known to work with commit e1789bc7 (between 2.2 and 2.3))

- QuickChick 1.0.2.

#### Coq

You can either build Coq from
[source](https://github.com/coq/coq/releases/tag/V8.8.1), or install it via
opam:

``` shell
opam install coq.8.8.1
```

#### CompCert and VST

You can build CompCert from
[source](https://github.com/AbsInt/CompCert/releases/tag/v3.4) (by the
time we submit this artifact, CompCert 3.4 is not available on
opam). An installation instruction can be found
[here](http://compcert.inria.fr/man/manual002.html).

You can build VST from
[source](https://github.com/PrincetonUniversity/VST). You will need to
build it from the code on master branch. In particular, the code at
commit 08759fd is the one we use. To build VST, simply download the
source code and hit `make`.

#### QuickChick

You can either build QuickChick from
[source](https://github.com/QuickChick/QuickChick/releases/tag/v1.0.2), or
install it via opam:

``` shell
opam install coq-quickchick.1.0.2
```

You may first need to add OPAM archive for Coq, if you haven't already:

``` shell
opam repo add coq-released https://coq.inria.fr/opam/released
```

Build Instructions
----------------

### Build Without VST Proofs

First, make sure you have Coq 8.8.1 and QuickChick 1.0.2 installed. Then, just
hit `make` (or `make -j` to use parallel compilations).

### Build With VST Proofs

First, you will need to have VST installed (see
[Prerequisites]). Then, you will need to change the first six lines in
the `_CoqProject.Vst.Proofs` to put in your VST installation path.

After that, rename the `_CoqProject.Vst.Proofs` file to
`_CoqProject.Vst`, or:

``` shell
cp _CoqProject.Vst.Proofs _CoqProject.Vst
```

The rest is the same as the build instructions [without VST proofs](Build
Without VST Proofs).

### Tests

To run tests, simply type:

``` shell
make test
```

To only run the tests of implementation model (i.e. to test that the
implementation model refines the linear specification), run:

``` shell
make test-impl-model
```

To only run the tests of C program (i.e. to test that the C program refines the
linear specification), run:

``` shell
make test-c
```


Artifact Structure
================

All the code in this artifact is divided into four directories: `Spec`,
`Proofs`, `Test`, and `Lib`. The names should be self-explanatory.

We will go over the most important files in these directories here. More details
can be found in those files as comments.

### Spec

The most important files in this directory are:

- `main.c', the C implementation of the swap server. `main.v` is the Coq
  representation of the program generated by CompCert.
- `Swap_LinearSpec.v`, which defines the linear specification of the swap
  server. This is Figure 3 in the paper.
- `Swap_ImplModel.v`, which defines the implementation model of the swap server.
  See Figure 8 in the paper.
- `TopLevelProp.v`, which defines __Theorem 1__ (Figure 4) in the paper.
- Within the `VST` directory:
    + `SocketSpecs.v` defines the VST separation logic axioms for the POSIX
      socket functions (e.g. the specification for `recv` in Figure 13 of the
      paper).
    + All files with the `_spec` suffix contain VST separation logic
      specifications for the function suggested by their name.
    + `Gprog.v` contains axiomatized separation logic specifications
      for library functions we rely on. It also contains the specification
      for the `main()` function.

### Proofs

This directory is further divided into two sub-directories:

- The `Vst` directory contains the proofs showing that the C program refines the
  implementation model. This directory contains many files. Most files starting
  with the `verif_` prefixes contain the proof of some particular functions
  suggested by their names.
    + `verif_prog.v` contains the top-level proof that the C program refines
      the implementation model (not network-refinement of the linear
      specification). This theorem is named `prog_correct` in the file, and
      relies on the lemma `all_funcs_correct` in the same file; this lemma
      states that all functions in the C program obey their separation logic
      specification.
    + `verif_select_loop.v` and `verif_process_connections.v` carry most of
      the proof burden of the C verification, because the invariants are quite
      intricate. These invariants are sketched and explained in `main.c`.

- The `Linear` directory contains the proofs showing that the implementation
  model refines the linear specification. The top-level proof here is contained
  in the end of `Top.v`.

`TopLevelProof.v` contains the proof of __Theorem 1__ in the paper.

### Test

This directory contains our test suite.

- `TestC.v` defines the tests showing that the C program refines the linear
  specification.
- `Client.v` is the client we used in testing to interact with the server.
- `TestImplModel.v` defines the tests showing that the implementation model
  refines the linear specification.

### Lib


This directory contains the network model, the definition of network
refinement, the effect types for the linear specification and
implementation model, and so on.

- `LinearSpec_Interface.v` gives an overview of the framework
  for our implementation model and linear specification. It
  illustrates:

    + Effects for implementations ("servers") and specifications
      ("observers").

    + Network model and network reordering.

    + Network refinement, with facilities both for proving and testing.

  The implementation of the framework is spread across the
  `LinearSpec_*.v` modules (more details can be found in
  `LinearSpec_Interface.v`).

- `NetworkInterface.v` defines the effects of socket operations used
  by the implementation model. `NetworkAdapter.v` provides a function
  `simplify_network` to translate these to effects from
  `LinearSpec_Server.v` used by the definition of network refinement,
  which is `implE` in the paper. Ultimately `NetworkInterface.v` will
  be phased out, so that the implementation model is over `implE` as
  per the paper.
